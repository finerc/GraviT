PROJECT(GVTOPTIX)
cmake_minimum_required(VERSION 2.6)
SET(GVT_BE_OPTIX OFF CACHE BOOL "Build Optix Backend")

IF (GVT_BE_OPTIX)
    FIND_PACKAGE(CUDA REQUIRED)
    FIND_PACKAGE(OptiX REQUIRED)

    INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR})
    INCLUDE_DIRECTORIES(${CUDA_INCLUDE_DIRS})
    INCLUDE_DIRECTORIES(${OptiX_INCLUDE})


    FILE(GLOB_RECURSE GVT_BE_OPTIX_CUDA ${PROJECT_SOURCE_DIR}/*.cu)
    FILE(GLOB_RECURSE GVT_BE_OPTIX_SRC ${PROJECT_SOURCE_DIR}/*.cpp ${PROJECT_SOURCE_DIR}/*.C)
    FILE(GLOB_RECURSE GVT_BE_OPTIX_HDR ${PROJECT_SOURCE_DIR}/*.h ${PROJECT_SOURCE_DIR}/*.hpp)

    LIST(APPEND CUDA_NVCC_FLAGS --compiler-options -fno-strict-aliasing -lineinfo -use_fast_math)
    LIST(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_30,code=sm_30)
    LIST(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_35,code=sm_35)

    #CUDA_SEPARABLE_COMPILATION(ON)
    #CUDA_SEPARABLE_COMPILATION(OFF)
    #CUDA_ADD_LIBRARY(GVTOptixLib ${LIB_TYPE} STATIC ${GVT_BE_OPTIX_HDR} ${GVT_BE_OPTIX_CUDA} )
    CUDA_COMPILE(GVTCudaOptix ${GVT_BE_OPTIX_HDR} ${GVT_BE_OPTIX_CUDA})


    INCLUDE_DIRECTORIES(${GVTCORE_INCLUDE_DIRS})

    ADD_LIBRARY(${PROJECT_NAME} STATIC ${GVT_BE_OPTIX_SRC} ${GVT_BE_OPTIX_HDR} ${GVTCudaOptix})
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} GVTCORE ${CUDA_LIBRARIES} ${optix_LIBRARIES} ${MPI_LIBRARIES}) 
    SET(${PROJECT_NAME}_INCLUDE_DIRS ${PROJECT_SOURCE_DIR} ${CUDA_INCLUDE_DIRS} ${OptiX_INCLUDE} CACHE INTERNAL "${PROJECT_NAME}: Include Directories" FORCE)
    SET(${PROJECT_NAME}_LIBRARIES ${CUDA_LIBRARIES} ${OptiX_LIBRARIES} CACHE INTERNAL "${PROJECT_NAME}: Libraries" FORCE)

    CONFIGURE_LIB_MPI()


    #CONFIGURE_FILE("${GVT_SOURCE_DIR}/config/config.h.in" "${GVT_BINARY_DIR}/config/config.h") 

ENDIF()
